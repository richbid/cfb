/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.IO;

namespace csns {
public class cls : ICloneable {
	public override int GetHashCode() { return base.GetHashCode(); }

	public override bool Equals(object obj) { return this == (cls)obj; }

	public Boolean mPBool { get; set; }

	public void setPBool(Boolean aPBool) {
		mPBool = aPBool;
	}

	public Boolean getPBool() {
		 return mPBool;
	}

	public onelab.Bytes mPBytes { get; set; }

	public void setPBytes(onelab.Bytes aPBytes) {
		mPBytes = (onelab.Bytes)aPBytes.Clone();
	}

	public onelab.Bytes getPBytes() {
		 return mPBytes;
	}

	public DateTime mPDate { get; set; }

	public void setPDate(DateTime aPDate) {
		mPDate = aPDate;
	}

	public DateTime getPDate() {
		 return mPDate;
	}

	public DateTime mPDateTime { get; set; }

	public void setPDateTime(DateTime aPDateTime) {
		mPDateTime = aPDateTime;
	}

	public DateTime getPDateTime() {
		 return mPDateTime;
	}

	public Double mPDouble { get; set; }

	public void setPDouble(Double aPDouble) {
		mPDouble = aPDouble;
	}

	public Double getPDouble() {
		 return mPDouble;
	}

	public Single mPFloat { get; set; }

	public void setPFloat(Single aPFloat) {
		mPFloat = aPFloat;
	}

	public Single getPFloat() {
		 return mPFloat;
	}

	public Int32 mPInt32 { get; set; }

	public void setPInt32(Int32 aPInt32) {
		mPInt32 = aPInt32;
	}

	public Int32 getPInt32() {
		 return mPInt32;
	}

	public String mPText { get; set; }

	public void setPText(String aPText) {
		mPText = aPText;
	}

	public String getPText() {
		 return mPText;
	}

	public DateTime mPTime { get; set; }

	public void setPTime(DateTime aPTime) {
		mPTime = aPTime;
	}

	public DateTime getPTime() {
		 return mPTime;
	}

	public UInt32 mPUInt32 { get; set; }

	public void setPUInt32(UInt32 aPUInt32) {
		mPUInt32 = aPUInt32;
	}

	public UInt32 getPUInt32() {
		 return mPUInt32;
	}

	protected bool compare_to(cls aValue) {
		if (mPBool != aValue.mPBool) return false;
		if (mPBytes != aValue.mPBytes) return false;
		if (mPDate != aValue.mPDate) return false;
		if (mPDateTime != aValue.mPDateTime) return false;
		if (mPDouble != aValue.mPDouble) return false;
		if (mPFloat != aValue.mPFloat) return false;
		if (mPInt32 != aValue.mPInt32) return false;
		if (mPText != aValue.mPText) return false;
		if (mPTime != aValue.mPTime) return false;
		if (mPUInt32 != aValue.mPUInt32) return false;
		return true;
	}

	protected void clone_from(cls aValue) {
		mPBool = aValue.mPBool;
		mPBytes = (onelab.Bytes)aValue.mPBytes.Clone();
		mPDate = aValue.mPDate;
		mPDateTime = aValue.mPDateTime;
		mPDouble = aValue.mPDouble;
		mPFloat = aValue.mPFloat;
		mPInt32 = aValue.mPInt32;
		mPText = aValue.mPText;
		mPTime = aValue.mPTime;
		mPUInt32 = aValue.mPUInt32;
	}

	public object Clone() {
		cls oValue = new cls();
		oValue.clone_from(this);
		return oValue;
	}

	public static bool operator == (cls a0, cls a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return true; return (o1 == null || o2 == null) ? false : a0.compare_to(a1); }

	public static bool operator != (cls a0, cls a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return false; return (o1 == null || o2 == null) ? true : !a0.compare_to(a1); }

	public cls(cls aValue) { clone_from(aValue); }

	public cls() {
		mPBytes = new onelab.Bytes();
	}

	public cls(Boolean aPBool, onelab.Bytes aPBytes, DateTime aPDate, DateTime aPDateTime, Double aPDouble, Single aPFloat, Int32 aPInt32, String aPText, DateTime aPTime, UInt32 aPUInt32) {
		mPBool = aPBool;
		mPBytes = (onelab.Bytes)aPBytes.Clone();
		mPDate = aPDate;
		mPDateTime = aPDateTime;
		mPDouble = aPDouble;
		mPFloat = aPFloat;
		mPInt32 = aPInt32;
		mPText = aPText;
		mPTime = aPTime;
		mPUInt32 = aPUInt32;
	}

	public void _invoke_(String entry, String input, ref String output) {
		if (false){}
	}
}//class cls
}//namespace csns