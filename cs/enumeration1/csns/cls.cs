/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.IO;

namespace csns {
public class cls : ICloneable {
	public enum MySize { mz1, mz2, mz3 }
	static private SortedList<csns.cls.MySize, String> cls_MySizeValues = new SortedList<csns.cls.MySize, String>();
	static public void set_MySizeValues()
	{
		if (cls_MySizeValues.Count > 0) return;
		cls_MySizeValues.Add(csns.cls.MySize.mz1, "");
		cls_MySizeValues.Add(csns.cls.MySize.mz2, "");
		cls_MySizeValues.Add(csns.cls.MySize.mz3, "");
	}
	static public String get_MySizeValues(csns.cls.MySize key)
	{
		return cls_MySizeValues[key];
	}

	public override int GetHashCode() { return base.GetHashCode(); }

	public override bool Equals(object obj) { return this == (cls)obj; }

	protected bool compare_to(cls aValue) {
		return true;
	}

	protected void clone_from(cls aValue) {
	}

	public object Clone() {
		cls oValue = new cls();
		oValue.clone_from(this);
		return oValue;
	}

	public static bool operator == (cls a0, cls a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return true; return (o1 == null || o2 == null) ? false : a0.compare_to(a1); }

	public static bool operator != (cls a0, cls a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return false; return (o1 == null || o2 == null) ? true : !a0.compare_to(a1); }

	public cls(cls aValue) { clone_from(aValue); }

	public cls() {
	}

	public virtual int Func(ref csns.cls.MySize aArg, ref csns.cls.MySize aReturn) {
	//function-begin : public virtual int Func(ref csns.cls.MySize aArg, ref csns.cls.MySize aReturn) @ csns.cls
		onelab.log.info("csns.cls.Func(csns.cls.MySize aArg)", "[enter]");
		return 0;
	//function-end
	}

	public void _invoke_(String entry, String input, ref String output) {
		if (false){}
		else if (entry == "Func"){
		}
	}
}//class cls
}//namespace csns