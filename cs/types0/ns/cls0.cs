/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.IO;

namespace ns {
public class cls0 : ICloneable {
	public override int GetHashCode() { return base.GetHashCode(); }

	public override bool Equals(object obj) { return this == (cls0)obj; }

	public Boolean mProp0 { get; set; }

	public void setProp0(Boolean aProp0) {
		mProp0 = aProp0;
	}

	public Boolean getProp0() {
		 return mProp0;
	}

	protected bool compare_to(cls0 aValue) {
		if (mProp0 != aValue.mProp0) return false;
		return true;
	}

	protected void clone_from(cls0 aValue) {
		mProp0 = aValue.mProp0;
	}

	public object Clone() {
		cls0 oValue = new cls0();
		oValue.clone_from(this);
		return oValue;
	}

	public static bool operator == (cls0 a0, cls0 a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return true; return (o1 == null || o2 == null) ? false : a0.compare_to(a1); }

	public static bool operator != (cls0 a0, cls0 a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return false; return (o1 == null || o2 == null) ? true : !a0.compare_to(a1); }

	public cls0(cls0 aValue) { clone_from(aValue); }

	public cls0() {
	}

	public cls0(Boolean aProp0) {
		mProp0 = aProp0;
	}

	public void _invoke_(String entry, String input, ref String output) {
		if (false){}
	}
	public virtual int field_count() {
		return 1;
	}

	private int validate_field(String key, object value) {
		return input_field(key, value, false);
	}

	private int validate_field(int index, object value) {
		return input_field(index, value, false);
	}

	public virtual int input_field(String key, object value, bool _set_value) {
		int result = 0;
		if (string.IsNullOrWhiteSpace(key) || value == null) return 0;
		else if (key == "Prop0") {
			Boolean v; if (!Boolean.TryParse(value.ToString(), out v)) return 0;
			if (_set_value)
				mProp0 = v;
			result = 1;
		}
		return result;
	}

	private static readonly string[] field_keys = new string[] { "Prop0",  };
	private int input_field(int index, object value, bool _set_value) {
		if (index < 0 || index > (field_count()-1) || value == null) return 0;
		return input_field(field_keys[index], value, _set_value);
	}

	public virtual int to_json(ref String output) {
		output = "{" + "\"Prop0\"" + ":" + "\"" + mProp0.ToString() + "\"" + "}";
		return 1;
	}

	public int from_json(System.Collections.Hashtable table) {
		SortedList<string, string> list = new SortedList<string, string>();
		foreach (string key in table.Keys) {
			object oValue = table[key];
			if (oValue != null) {
				string value = oValue.ToString();
				if (validate_field(key, value) == 0)
					return 0;
				list.Add(key, value);
			}
		}
		if (list.Count != field_count()) return 0;
		foreach (string k in list.Keys)
			input_field(k, list[k], true);
		return 1;
	}

	public int from_json(String input) {
		if (string.IsNullOrWhiteSpace(input)) return 0;
		try {
			object obj = json.Parser.Decode(input);
			json.Parser.ParseResult result = (json.Parser.ParseResult)obj;
			return from_json((System.Collections.Hashtable)result.JSONObject);
		}
		catch { return 0; }
	}

	public virtual int to_xml(ref String output, String rowTag) {
		if (string.IsNullOrWhiteSpace(rowTag)) return 0;
		output = "<" + rowTag + ">" + "<Prop0>" + mProp0.ToString().Replace("<", "&lt;").Replace("<", "&gt;") + "</Prop0>" + "</" + rowTag + ">";
		return 1;
	}

	public int from_xml(String input, String rowTag) {
		if (string.IsNullOrWhiteSpace(input) || string.IsNullOrWhiteSpace(rowTag)) return 0;
		try {
			SortedList<string, string> list = new SortedList<string, string>();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.LoadXml(input);
			if (doc.DocumentElement.Name != rowTag) return 0;
			foreach(System.Xml.XmlNode node in doc.DocumentElement.ChildNodes) {
				string key = node.Name;
				string value = node.InnerText;
				if (validate_field(key, value) == 0) return 0;
				list.Add(key, value);
			}
			if (list.Count != field_count()) return 0;
			foreach (string k in list.Keys)
				input_field(k, list[k], true);
		}
		catch { return 0; }
		return 1;
	}

	public virtual int to_sv(ref String output, String spliter) {
		if (string.IsNullOrWhiteSpace(spliter)) return 0;
		List<String> list = new List<String>();
		list.Add(mProp0.ToString());
	
		output = String.Join(spliter, list.ToArray());
		return 1;
	}

	public int from_sv(String input, String spliter) {
		if (string.IsNullOrWhiteSpace(input) || string.IsNullOrWhiteSpace(spliter)) return 0;
		string[] list = input.Split(new string[] { spliter }, StringSplitOptions.RemoveEmptyEntries);
		if (list.Length != field_count()) return 0;
		int index = 0;
		foreach(string item in list)
			if (validate_field(index++, item) == 0)
				return 0;
		index = 0;
		foreach(string item in list)
			input_field(index++, item, true);
		return 1;
	}

}//class cls0
public class cls0List {
	public Object Clone() {
		cls0List obj = new cls0List();
		obj.Items.AddRange(Items);
		return obj;
	}
	public List<cls0> Items = new List<cls0>();

	public override int GetHashCode() { return base.GetHashCode(); }

	public override bool Equals(object obj) { return this == (cls0List)obj; }

	protected bool compare_to(cls0List aValue) {
		if (aValue == null) return false;
		if (Items.Count != aValue.Items.Count) return false;
		for (int n = 0; n < Items.Count; n++) if (Items[n] != aValue.Items[n]) return false;
		return true;
	}

	public static bool operator == (cls0List a0, cls0List a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return true; return (o1 == null || o2 == null) ? false : a0.compare_to(a1); }

	public static bool operator != (cls0List a0, cls0List a1) { object o1 = (object)a0; object o2 = (object)a1; if (o1 == null && o2 == null) return false; return (o1 == null || o2 == null) ? true : !a0.compare_to(a1); }

	public int to_json(ref String output, String tag = "cls0") {
		if (string.IsNullOrWhiteSpace(tag)) return 0;
		List<string> list = new List<string>();
		string text = "";
		foreach(cls0 item in Items) {
			item.to_json(ref text);
			list.Add(text);
		}
		output = "{\"" + tag + "\":[" + string.Join(",", list.ToArray()) + "]}";
		return 1;
	}

	public int from_json(String input, String tag = "cls0") {
		if (string.IsNullOrWhiteSpace(input) || string.IsNullOrWhiteSpace(tag)) return 0;
		try {
			List<cls0> newList = new List<cls0>();
			object obj = json.Parser.Decode(input);
			json.Parser.ParseResult result = (json.Parser.ParseResult)obj;
			System.Collections.Hashtable table = (System.Collections.Hashtable)result.JSONObject;
			System.Collections.ArrayList list = (System.Collections.ArrayList)table[tag];
			foreach(object value in list) {
				cls0 cls = new cls0();
				if (cls.from_json((System.Collections.Hashtable)value) == 0) return 0;
				newList.Add(cls);
			}
			Items.Clear();
			Items = newList;
		}
		catch { return 0; }
		return 1;
	}

	public int to_xml(ref String output, String rowTag, String tableTag) {
		if (string.IsNullOrWhiteSpace(rowTag) ||string.IsNullOrWhiteSpace(tableTag)) return 0;
		List<string> list = new List<string>();
		string text = "";
		foreach(cls0 item in Items) {
			item.to_xml(ref text, rowTag);
			list.Add(text);
		}
		output = "<" + tableTag + ">" + string.Join("", list.ToArray()) + "</" + tableTag + ">";
		return 1;
	}

	public int from_xml(String input, String rowTag, String tableTag) {
		if (string.IsNullOrWhiteSpace(input) || string.IsNullOrWhiteSpace(rowTag) || string.IsNullOrWhiteSpace(tableTag)) return 0;
		try {
			List<cls0> newList = new List<cls0>();
			System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
			doc.LoadXml(input);
			if (doc.DocumentElement.Name != tableTag) return 0;
			foreach (System.Xml.XmlNode node in doc.DocumentElement.ChildNodes) {
				cls0 cls = new cls0();
				if (cls.from_xml(node.OuterXml, rowTag) == 0) return 0;
				newList.Add(cls);
			}
			Items.Clear();
			Items = newList;
		}
		catch { return 0; }
		return 1;
	}

	public int to_sv(ref String output, String spliter) {
		if (string.IsNullOrWhiteSpace(spliter)) return 0;
		List<string> list = new List<string>();
		string text = "";
		foreach(cls0 item in Items) {
			item.to_sv(ref text, spliter);
			list.Add(text);
		}
		output = string.Join("\n", list.ToArray());
		return 1;
	}

	public int from_sv(String input, String spliter) {
		if (string.IsNullOrWhiteSpace(input) || string.IsNullOrWhiteSpace(spliter)) return 0;
		string[] list = input.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);
		if (list.Length == 0) return 0;
		List<cls0> newList = new List<cls0>();
		foreach(string item in list) {
			cls0 cls = new cls0();
			if (cls.from_sv(item, spliter) == 0) return 0;
			newList.Add(cls);
		}
		if (newList.Count == list.Length) {
			Items.Clear();
			Items = newList;
			return 1;
		}
		return 0;
	}
}//class cls0List
}//namespace ns