/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
package javans;
 
import java.lang.*;
import java.text.*;
import java.util.*;
import net.onelab.*;
import net.onelab.JSONException;
import net.onelab.JSONObject;

public class cls implements Cloneable {
protected void clone_from(cls aValue) {
	setPBool(aValue.getPBool());
	setPBytes((net.onelab.Bytes)aValue.getPBytes().clone());
	setPDate(aValue.getPDate());
	setPDateTime(aValue.getPDateTime());
	setPDouble(aValue.getPDouble());
	setPFloat(aValue.getPFloat());
	setPInt32(aValue.getPInt32());
	setPText(aValue.getPText());
	setPTime(aValue.getPTime());
	setPUInt32(aValue.getPUInt32());
}

public Object clone() {
	cls oValue = new cls();
	oValue.clone_from(this);
	return oValue;
}

public boolean equals(Object oValue) {
	if (oValue == null) return false;
	if (this == oValue) return true;
	cls aValue = (cls)oValue;
	if (!mPBool.equals(aValue.getPBool())) return false;
	if (!mPBytes.equals(aValue.getPBytes())) return false;
	if (!mPDate.equals(aValue.getPDate())) return false;
	if (!mPDateTime.equals(aValue.getPDateTime())) return false;
	if (!mPDouble.equals(aValue.getPDouble())) return false;
	if (!mPFloat.equals(aValue.getPFloat())) return false;
	if (!mPInt32.equals(aValue.getPInt32())) return false;
	if (!mPText.equals(aValue.getPText())) return false;
	if (!mPTime.equals(aValue.getPTime())) return false;
	if (!mPUInt32.equals(aValue.getPUInt32())) return false;
	return true;
}
 
private Boolean mPBool = new Boolean(false);

public void setPBool(Boolean aPBool) {
	mPBool = aPBool;
}

public Boolean getPBool() {
	 return mPBool;
}

 
private net.onelab.Bytes mPBytes = new net.onelab.Bytes();

public void setPBytes(net.onelab.Bytes aPBytes) {
	mPBytes = (net.onelab.Bytes)aPBytes.clone();
}

public net.onelab.Bytes getPBytes() {
	 return mPBytes;
}

 
private java.util.GregorianCalendar mPDate = new GregorianCalendar();

public void setPDate(java.util.GregorianCalendar aPDate) {
	mPDate = aPDate;
}

public java.util.GregorianCalendar getPDate() {
	 return mPDate;
}

 
private java.util.GregorianCalendar mPDateTime = new GregorianCalendar();

public void setPDateTime(java.util.GregorianCalendar aPDateTime) {
	mPDateTime = aPDateTime;
}

public java.util.GregorianCalendar getPDateTime() {
	 return mPDateTime;
}

 
private Double mPDouble = new Double(0.0);

public void setPDouble(Double aPDouble) {
	mPDouble = aPDouble;
}

public Double getPDouble() {
	 return mPDouble;
}

 
private Float mPFloat = new Float(0.0f);

public void setPFloat(Float aPFloat) {
	mPFloat = aPFloat;
}

public Float getPFloat() {
	 return mPFloat;
}

 
private Integer mPInt32 = new Integer(0);

public void setPInt32(Integer aPInt32) {
	mPInt32 = aPInt32;
}

public Integer getPInt32() {
	 return mPInt32;
}

 
private String mPText = new String();

public void setPText(String aPText) {
	mPText = aPText;
}

public String getPText() {
	 return mPText;
}

 
private java.util.GregorianCalendar mPTime = new GregorianCalendar();

public void setPTime(java.util.GregorianCalendar aPTime) {
	mPTime = aPTime;
}

public java.util.GregorianCalendar getPTime() {
	 return mPTime;
}

 
private Integer mPUInt32 = new Integer(0);

public void setPUInt32(Integer aPUInt32) {
	mPUInt32 = aPUInt32;
}

public Integer getPUInt32() {
	 return mPUInt32;
}

public cls() {
}

public cls(Boolean aPBool, net.onelab.Bytes aPBytes, java.util.GregorianCalendar aPDate, java.util.GregorianCalendar aPDateTime, Double aPDouble, Float aPFloat, Integer aPInt32, String aPText, java.util.GregorianCalendar aPTime, Integer aPUInt32) {
	setPBool(aPBool);
	setPBytes((net.onelab.Bytes)aPBytes.clone());
	setPDate(aPDate);
	setPDateTime(aPDateTime);
	setPDouble(aPDouble);
	setPFloat(aPFloat);
	setPInt32(aPInt32);
	setPText(aPText);
	setPTime(aPTime);
	setPUInt32(aPUInt32);
}

public void _invoke_(String entry, String input, String output) {
	if (false){}
}
}//class cls