/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
package ns;
 
import java.lang.*;
import java.text.*;
import java.util.*;
import net.onelab.*;
import net.onelab.JSONException;
import net.onelab.JSONObject;

public class cls2 extends ns.cls implements Cloneable, ns.ife {
protected void clone_from(cls2 aValue) {
	super.clone_from(aValue);
	setPInt(aValue.getPInt());
}

public Object clone() {
	cls2 oValue = new cls2();
	oValue.clone_from(this);
	return oValue;
}

public boolean equals(Object oValue) {
	if (this == oValue) return true;
	if (!super.equals(oValue)) return false;
	cls2 aValue = (cls2)oValue;
	if (!mPInt.equals(aValue.getPInt())) return false;
	return true;
}
 
private Integer mPInt = new Integer(0);

public void setPInt(Integer aPInt) {
	mPInt = aPInt;
}

public Integer getPInt() {
	 return mPInt;
}

public cls2() {
}

public cls2(Integer aPInt) {
	setPInt(aPInt);
}

public int Fx1(Boolean aArg, net.onelab.ReturnInt32 aReturn) {
	return 0;
}

public void _invoke_(String entry, String input, String output) {
	if (false){}
	else if (entry.equals("Fx1")){
	}
}
public static int field_count() {
	return ns.cls.field_count() + 1;
}

private int validate_field(String key, Object value) throws ParseException {
	return input_field(key, value, false);
}

private int validate_field(int index, Object value) throws ParseException {
	return input_field(index, value, false);
}

public int input_field(String key, Object value, boolean _set_value) throws ParseException {
	int result = 0;
	if (super.input_field(key, value, _set_value) == 1) return 1;
	else if (key.equals("PInt")) {
		if (_set_value) {
			Integer v = Integer.valueOf(value.toString());
			mPInt = v;
		}
		result = 1;
	}
	return result;
}

private static final String field_keys[] = { "PInt",  };
private int input_field(int index, Object value, boolean _set_value) throws ParseException {
	if (index < 0 || index > (field_count()-1) || value == null) return 0;
	return input_field(field_keys[index], value, _set_value);
}

public int to_json(StringBuilder output) {
	StringBuilder baseOutput = new StringBuilder();
	if (super.to_json(baseOutput) == 0) return 0;
	String superOutput = new String(baseOutput.substring(1, baseOutput.length()-1)) + ",";
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	output.append("{" + superOutput + "\"PInt\"" + ":" + "\"" + mPInt.toString() + "\"" + "}");
	return 1;
}

public int from_json(String input) throws JSONException, ParseException {
	if (input == null || input.length() == 0) return 0;
	JSONObject json = new JSONObject(input);
	if (json.length() != field_count()) return 0;
	for(String key : json.keySet())
		if (validate_field(key, json.get(key)) == 0)
			return 0;
	for(String key : json.keySet())
		input_field(key, json.get(key), true);
	return 1;
}

public int to_xml(StringBuilder output, String rowTag) {
	StringBuilder baseOutput = new StringBuilder();
	if (super.to_xml(baseOutput, rowTag) == 0) return 0;
	String superOutput = new String(baseOutput.toString().replace("<" + rowTag + ">", "").replace("</" + rowTag + ">", ""));
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	output.append("<" + rowTag + ">" + superOutput + "<PInt>" + mPInt.toString().replace("<", "&lt;").replace(">", "&gt;") + "</PInt>" + "</" + rowTag + ">");
	return 1;
}

public int from_xml(String input, String rowTag) throws JSONException, ParseException {
	if (input == null || input.length() == 0 || rowTag == null || rowTag.length() == 0) return 0;
	JSONObject json = XML.toJSONObject(input);
	if (!json.has(rowTag)) return 0;
	return from_json(json.get(rowTag).toString());
}

public int to_sv(StringBuilder output, String spliter) {
	StringBuilder baseOutput = new StringBuilder();
	if (super.to_sv(baseOutput, spliter) == 0) return 0;
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	java.util.List<String> list = new ArrayList<String>();
	list.add(mPInt.toString());

	output.append(baseOutput + spliter); output.append(net.onelab.Text.join(spliter, list));
	return 1;
}

public int from_sv(String input, String spliter) throws ParseException {
	if (input == null || input.length() == 0 || spliter == null || spliter.length() == 0) return 0;
	String[] list = input.split(spliter);
	if (list.length != field_count()) return 0;
	int index = 0;
	for(String item : list)
		if (validate_field(index++, item) == 0)
			return 0;
	index = 0;
	for(String item : list)
		input_field(index++, item, true);
	return 1;
}

}//class cls2