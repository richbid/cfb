/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
package ns;
 
import java.lang.*;
import java.text.*;
import java.util.*;
import net.onelab.*;
import net.onelab.JSONException;
import net.onelab.JSONObject;

public class cls implements Cloneable {
protected void clone_from(cls aValue) {
	setPText(aValue.getPText());
}

public Object clone() {
	cls oValue = new cls();
	oValue.clone_from(this);
	return oValue;
}

public boolean equals(Object oValue) {
	if (oValue == null) return false;
	if (this == oValue) return true;
	cls aValue = (cls)oValue;
	if (!mPText.equals(aValue.getPText())) return false;
	return true;
}
 
private String mPText = new String();

public void setPText(String aPText) {
	mPText = aPText;
}

public String getPText() {
	 return mPText;
}

public cls() {
}

public cls(String aPText) {
	setPText(aPText);
}

public int trigger(net.onelab.ReturnInt32 aReturn) {
//function-begin : public int trigger(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.trigger()", "[enter]");
	f0(aReturn);
	f1(aReturn);
	f2(aReturn);
	return 0;
//function-end
}

public void trigger2() {
//function-begin : public void trigger2() @ ns.cls
	net.onelab.log.info("ns.cls.trigger2()", "[enter]");
//function-end
}

private int f0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int f0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.f0()", "[enter]");
	return 0;
//function-end
}

private int f1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int f1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.f1()", "[enter]");
	if (ifx0(aReturn) != 0) { tfx(aReturn); } else { ffx(aReturn); }
	return 0;
//function-end
}

private int f2(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int f2(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.f2()", "[enter]");
	if (ifx1(aReturn) != 0) { tf0(aReturn); tf1(aReturn); tf2(aReturn); } else { f0(aReturn); f1(aReturn); f2(aReturn); }
	return 0;
//function-end
}

private int ifx0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int ifx0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.ifx0()", "[enter]");
	return 0;
//function-end
}

private int tfx(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int tfx(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.tfx()", "[enter]");
	switch (sfx0(aReturn)) {
	case 0: cfx(aReturn); break;
	case 1: return -1;
	case 2: return -2;
	default:break;
	}
	return 0;
//function-end
}

private int ffx(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int ffx(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.ffx()", "[enter]");
	switch (sfx1(aReturn)) {
	case 0: cf0(aReturn); break;
	case 1: cf1(aReturn); break;
	case 2: cf2(aReturn); break;
	default:break;
	}
	return 0;
//function-end
}

private int ifx1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int ifx1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.ifx1()", "[enter]");
	return 0;
//function-end
}

private int tf0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int tf0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.tf0()", "[enter]");
	return 0;
//function-end
}

private int tf1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int tf1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.tf1()", "[enter]");
	return 0;
//function-end
}

private int tf2(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int tf2(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.tf2()", "[enter]");
	return 0;
//function-end
}

private int sfx0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int sfx0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.sfx0()", "[enter]");
	return 0;
//function-end
}

private int cfx(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int cfx(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.cfx()", "[enter]");
	return 0;
//function-end
}

private int sfx1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int sfx1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.sfx1()", "[enter]");
	return 0;
//function-end
}

private int cf0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int cf0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.cf0()", "[enter]");
	while (wfx0(aReturn) != 0) { lfx(aReturn); }
	return 0;
//function-end
}

private int cf1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int cf1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.cf1()", "[enter]");
	while (wfx1(aReturn) != 0) { lf0(aReturn); lf1(aReturn); lf2(aReturn); }
	return 0;
//function-end
}

private int cf2(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int cf2(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.cf2()", "[enter]");
	return 0;
//function-end
}

private int wfx0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int wfx0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.wfx0()", "[enter]");
	return 0;
//function-end
}

private int lfx(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int lfx(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.lfx()", "[enter]");
	return 0;
//function-end
}

private int wfx1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int wfx1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.wfx1()", "[enter]");
	return 0;
//function-end
}

private int lf0(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int lf0(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.lf0()", "[enter]");
	return 0;
//function-end
}

private int lf1(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int lf1(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.lf1()", "[enter]");
	return 0;
//function-end
}

private int lf2(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int lf2(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.lf2()", "[enter]");
	if (if10(aReturn) != 0) { return -1; } else { return -2; }
//function-end
}

private int if9(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int if9(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.if9()", "[enter]");
	return 0;
//function-end
}

private int tf10(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int tf10(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.tf10()", "[enter]");
	while (lf10(aReturn) != 0);
	return 0;
//function-end
}

private int if10(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int if10(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.if10()", "[enter]");
	return 0;
//function-end
}

private int lf10(net.onelab.ReturnInt32 aReturn) {
//function-begin : private int lf10(net.onelab.ReturnInt32 aReturn) @ ns.cls
	net.onelab.log.info("ns.cls.lf10()", "[enter]");
	return 0;
//function-end
}

public void _invoke_(String entry, String input, String output) {
	if (false){}
	else if (entry.equals("trigger")){
	}
	else if (entry.equals("trigger2")){
	}
}
public static int field_count() {
	return 1;
}

private int validate_field(String key, Object value) throws ParseException {
	return input_field(key, value, false);
}

private int validate_field(int index, Object value) throws ParseException {
	return input_field(index, value, false);
}

public int input_field(String key, Object value, boolean _set_value) throws ParseException {
	int result = 0;
	if (key == null || key.isEmpty() || value == null) return 0;
	else if (key.equals("PText")) {
		if (_set_value) {
			String v = value.toString();
			mPText = v;
		}
		result = 1;
	}
	return result;
}

private static final String field_keys[] = { "PText",  };
private int input_field(int index, Object value, boolean _set_value) throws ParseException {
	if (index < 0 || index > (field_count()-1) || value == null) return 0;
	return input_field(field_keys[index], value, _set_value);
}

public int to_json(StringBuilder output) {
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	output.append("{" + "\"PText\"" + ":" + "\"" + mPText + "\"" + "}");
	return 1;
}

public int from_json(String input) throws JSONException, ParseException {
	if (input == null || input.length() == 0) return 0;
	JSONObject json = new JSONObject(input);
	if (json.length() != field_count()) return 0;
	for(String key : json.keySet())
		if (validate_field(key, json.get(key)) == 0)
			return 0;
	for(String key : json.keySet())
		input_field(key, json.get(key), true);
	return 1;
}

public int to_xml(StringBuilder output, String rowTag) {
	if (rowTag == null || rowTag.length() < 1) return 0;
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	output.append("<" + rowTag + ">" + "<PText>" + mPText.replace("<", "&lt;").replace(">", "&gt;") + "</PText>" + "</" + rowTag + ">");
	return 1;
}

public int from_xml(String input, String rowTag) throws JSONException, ParseException {
	if (input == null || input.length() == 0 || rowTag == null || rowTag.length() == 0) return 0;
	JSONObject json = XML.toJSONObject(input);
	if (!json.has(rowTag)) return 0;
	return from_json(json.get(rowTag).toString());
}

public int to_sv(StringBuilder output, String spliter) {
	if (spliter == null || spliter.length() == 0) return 0;
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	java.util.List<String> list = new ArrayList<String>();
	list.add(mPText);

	output.append(net.onelab.Text.join(spliter, list));
	return 1;
}

public int from_sv(String input, String spliter) throws ParseException {
	if (input == null || input.length() == 0 || spliter == null || spliter.length() == 0) return 0;
	String[] list = input.split(spliter);
	if (list.length != field_count()) return 0;
	int index = 0;
	for(String item : list)
		if (validate_field(index++, item) == 0)
			return 0;
	index = 0;
	for(String item : list)
		input_field(index++, item, true);
	return 1;
}

}//class cls