/* This class framework is generated by Core Frame Builder. */
/* For more information, refer to http://www.one-lab.net/ */

/* Data Handling Class */
package javans;
 
import java.lang.*;
import java.text.*;
import java.util.*;
import net.onelab.*;
import net.onelab.JSONException;
import net.onelab.JSONObject;

public class cls implements Cloneable {
public enum MySize { mz1, mz2, mz3 }
static private SortedMap<javans.cls.MySize, String> cls_MySizeValues = new TreeMap<javans.cls.MySize, String>();
static public void set_MySizeValues() {
	if (!cls_MySizeValues.isEmpty()) return;
	cls_MySizeValues.put(javans.cls.MySize.mz1, "");
	cls_MySizeValues.put(javans.cls.MySize.mz2, "");
	cls_MySizeValues.put(javans.cls.MySize.mz3, "");
}
static public String get_MySizeValues(javans.cls.MySize key) {
	return cls_MySizeValues.get(key);
}

protected void clone_from(cls aValue) {
	setPMySize(aValue.getPMySize());
}

public Object clone() {
	cls oValue = new cls();
	oValue.clone_from(this);
	return oValue;
}

public boolean equals(Object oValue) {
	if (oValue == null) return false;
	if (this == oValue) return true;
	cls aValue = (cls)oValue;
	if (!mPMySize.equals(aValue.getPMySize())) return false;
	return true;
}
 
private javans.cls.MySize mPMySize = javans.cls.MySize.values()[0];

public void setPMySize(javans.cls.MySize aPMySize) {
	mPMySize = aPMySize;
}

public javans.cls.MySize getPMySize() {
	 return mPMySize;
}

public cls() {
}

public cls(javans.cls.MySize aPMySize) {
	setPMySize(aPMySize);
}

public void _invoke_(String entry, String input, String output) {
	if (false){}
}
public static int field_count() {
	return 1;
}

private int validate_field(String key, Object value) throws ParseException {
	return input_field(key, value, false);
}

private int validate_field(int index, Object value) throws ParseException {
	return input_field(index, value, false);
}

public int input_field(String key, Object value, boolean _set_value) throws ParseException {
	int result = 0;
	if (key == null || key.isEmpty() || value == null) return 0;
	else if (key.equals("PMySize")) {
		if (_set_value) {
		javans.cls.MySize v = javans.cls.MySize.values()[Integer.valueOf(value.toString())];
			mPMySize = v;
		}
		result = 1;
	}
	return result;
}

private static final String field_keys[] = { "PMySize",  };
private int input_field(int index, Object value, boolean _set_value) throws ParseException {
	if (index < 0 || index > (field_count()-1) || value == null) return 0;
	return input_field(field_keys[index], value, _set_value);
}

public int to_json(StringBuilder output) {
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	output.append("{" + "\"PMySize\"" + ":" + "\"" + ((Integer)mPMySize.ordinal()).toString() + "\"" + "}");
	return 1;
}

public int from_json(String input) throws JSONException, ParseException {
	if (input == null || input.length() == 0) return 0;
	JSONObject json = new JSONObject(input);
	if (json.length() != field_count()) return 0;
	for(String key : json.keySet())
		if (validate_field(key, json.get(key)) == 0)
			return 0;
	for(String key : json.keySet())
		input_field(key, json.get(key), true);
	return 1;
}

public int to_xml(StringBuilder output, String rowTag) {
	if (rowTag == null || rowTag.length() < 1) return 0;
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	output.append("<" + rowTag + ">" + "<PMySize>" + ((Integer)mPMySize.ordinal()).toString().replace("<", "&lt;").replace(">", "&gt;") + "</PMySize>" + "</" + rowTag + ">");
	return 1;
}

public int from_xml(String input, String rowTag) throws JSONException, ParseException {
	if (input == null || input.length() == 0 || rowTag == null || rowTag.length() == 0) return 0;
	JSONObject json = XML.toJSONObject(input);
	if (!json.has(rowTag)) return 0;
	return from_json(json.get(rowTag).toString());
}

public int to_sv(StringBuilder output, String spliter) {
	if (spliter == null || spliter.length() == 0) return 0;
	if (output == null) output = new StringBuilder(); else output.setLength(0);
	java.util.List<String> list = new ArrayList<String>();
	list.add(((Integer)mPMySize.ordinal()).toString());

	output.append(net.onelab.Text.join(spliter, list));
	return 1;
}

public int from_sv(String input, String spliter) throws ParseException {
	if (input == null || input.length() == 0 || spliter == null || spliter.length() == 0) return 0;
	String[] list = input.split(spliter);
	if (list.length != field_count()) return 0;
	int index = 0;
	for(String item : list)
		if (validate_field(index++, item) == 0)
			return 0;
	index = 0;
	for(String item : list)
		input_field(index++, item, true);
	return 1;
}

}//class cls